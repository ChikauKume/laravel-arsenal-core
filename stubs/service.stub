<?php

namespace {{ namespace }};

/**
 * -----------------------------------------------------------------
 * LAC Auto-generated Service
 * -----------------------------------------------------------------
 * This file was generated by lac:scaffold.
 * 
 * Note: If you run lac:scaffold for this resource again,
 * any changes made to this file will be overwritten.
 *
 * @generated {{ generatedAt }}
 * -----------------------------------------------------------------
*/

use {{ modelNamespace }}\{{ model }};
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class {{ class }} {
    /**
     * Get all {{ modelVariablePlural }} with pagination.
     *
     * @param int $perPage Number of items per page
     * @return LengthAwarePaginator
     */
    public function getAllPaginated(int $perPage = 15): LengthAwarePaginator {
        return {{ model }}::latest()->paginate($perPage);
    }

    /**
     * Get all {{ modelVariablePlural }}.
     *
     * @return Collection
     */
    public function getAll(): Collection {
        return {{ model }}::all();
    }

    /**
     * Find {{ modelVariable }} by ID.
     *
     * @param int $id
     * @return {{ model }}|null
     */
    public function findById(int $id): ?{{ model }} {
        return {{ model }}::find($id);
    }

    /**
     * Create a new {{ modelVariable }}.
     *
     * @param array $data
     * @return {{ model }}
     * @throws \Exception
     */
    public function create(array $data): {{ model }} {
        try {
            DB::beginTransaction();
            
            // Main creation process
            ${{ modelVariable }} = {{ model }}::create($data);
            
            // You can add related data processing here
            // Example: ${{ modelVariable }}->someRelation()->create([...]);
            
            DB::commit();
            
            return ${{ modelVariable }};
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Failed to create {{ model }}: ' . $e->getMessage(), [
                'data' => $data,
                'exception' => $e
            ]);
            throw $e; // You can either rethrow or transform into a custom exception
        }
    }

    /**
     * Update an existing {{ modelVariable }}.
     *
     * @param {{ model }} ${{ modelVariable }}
     * @param array $data
     * @return bool
     * @throws \Exception
     */
    public function update({{ model }} ${{ modelVariable }}, array $data): bool {
        try {
            DB::beginTransaction();
            
            // Main update process
            $result = ${{ modelVariable }}->update($data);
            
            // You can add related data processing here
            // Example: ${{ modelVariable }}->someRelation()->update([...]);
            
            DB::commit();
            
            return $result;
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Failed to update {{ model }}: ' . $e->getMessage(), [
                'id' => ${{ modelVariable }}->id,
                'data' => $data,
                'exception' => $e
            ]);
            throw $e; // You can either rethrow or transform into a custom exception
        }
    }

    /**
     * Delete a {{ modelVariable }}.
     *
     * @param {{ model }} ${{ modelVariable }}
     * @return bool|null
     * @throws \Exception
     */
    public function delete({{ model }} ${{ modelVariable }}): ?bool {
        try {
            DB::beginTransaction();
            
            // You can add related data processing here
            // Example: ${{ modelVariable }}->someRelation()->delete();
            
            // Main deletion process
            $result = ${{ modelVariable }}->delete();
            
            DB::commit();
            
            return $result;
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Failed to delete {{ model }}: ' . $e->getMessage(), [
                'id' => ${{ modelVariable }}->id,
                'exception' => $e
            ]);
            throw $e; // You can either rethrow or transform into a custom exception
        }
    }
    
    /**
     * Search {{ modelVariablePlural }} by criteria.
     *
     * @param array $criteria
     * @param int $perPage
     * @return LengthAwarePaginator
     */
    public function search(array $criteria, int $perPage = 15): LengthAwarePaginator {
        $query = {{ model }}::query();
        
        // Apply Search conditions
        
        // Execute pagination
        return $query->paginate($perPage);
    }
}